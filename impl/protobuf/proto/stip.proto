syntax = "proto2";

package stip;

/*
 * ClusterManagement Service
 */
service ClusterManagement {
    rpc NodeList (NodeListRequest) returns (NodeListReply);
    rpc NodeShow (NodeShowRequest) returns (NodeShowReply);
}

// Node Messages
message Node {
    required uint32 id = 1;
    required string rpcAddr = 2;
    required string xferAddr = 3;
}

message NodeListRequest {
}

message NodeListReply {
    repeated Node nodes = 1;
}

message NodeShowRequest {
    required uint32 id = 1;
}

message NodeShowReply {
    optional Node node = 1;
}

/*
 * DataManagement Service
 */
service DataManagement {
    rpc Broadcast (DataBroadcastRequest) returns (DataBroadcastReply);
    rpc Fill (DataFillRequest) returns (DataFillReply);
    rpc List (DataListRequest) returns (stream Image);
    rpc Load (DataLoadRequest) returns (DataLoadReply);
    rpc Search (DataSearchRequest) returns (stream Extent);
    rpc Split (DataSplitRequest) returns (DataSplitReply);
}

message Filter {
    optional int64 endTimestamp = 1;
    optional string geohash = 2;
    optional double maxCloudCoverage = 3;
    optional double minPixelCoverage = 4;
    optional string platform = 5;
    optional bool recurse = 6;
    optional string source = 7;
    optional int64 startTimestamp = 8;
}

// Broadcast Messages
enum DataBroadcastType {
    FILL = 0;
    SPLIT = 1;
}

message DataBroadcastRequest {
    required DataBroadcastType messageType = 1;    
    optional DataFillRequest fillRequest = 2;
    optional DataSplitRequest splitRequest = 3;
}

message DataBroadcastReply {
    required DataBroadcastType messageType = 1;    
    map<uint32, DataFillReply> fillReplies = 2;
    map<uint32, DataSplitReply> splitReplies = 3;
}

// Fill Messages
message DataFillRequest {
    required Filter filter = 1;
    optional uint64 taskId = 2;
    required uint32 threadCount = 3;
    required int64 windowSeconds = 4;
}

message DataFillReply {
    required uint64 taskId = 1;
}

// List Messages
message Image {
    optional double cloudCoverage = 1;
    required string geohash = 2;
    repeated File files = 3;
    required double pixelCoverage = 4;
    required string platform = 5;
    required string source = 6;
    required int64 timestamp = 7;
}

message File {
    repeated string bands = 1;
    required string dataType = 2;
    required string path = 3;
    required string resolution = 4;
}

message DataListRequest {
    required Filter filter = 1; 
}

// Load Messages
enum LoadFormat {
    NAIP = 0;
    SENTINEL = 1;
}

message DataLoadRequest {
    required string glob = 1;
    required LoadFormat loadFormat = 2;
    required uint32 precision = 3;
    optional uint64 taskId = 4;
    required uint32 threadCount = 5;
}

message DataLoadReply {
    required uint64 task_id = 1;
}

// Search Messages
message Extent {
    required uint32 count = 1;
    required string geohash = 2;
    required string platform = 3;
    required uint32 precision = 4;
    required string source = 5;
}

message DataSearchRequest {
    required Filter filter = 1; 
}

// Split Messages
message DataSplitRequest {
    required Filter filter = 1; 
    optional uint64 taskId = 2;
    required uint32 threadCount = 3;
}

message DataSplitReply {
    required uint64 taskId = 1;
}

/*
 * TaskManagement Service
 */
service TaskManagement {
    rpc Broadcast (TaskBroadcastRequest) returns (TaskBroadcastReply);
    rpc List (TaskListRequest) returns (TaskListReply);
    rpc Show (TaskShowRequest) returns (TaskShowReply);
}

// Broadcast Messages
enum TaskBroadcastType {
    TASK_LIST = 0;
}

message TaskBroadcastRequest {
    required TaskBroadcastType messageType = 1;    
    optional TaskListRequest listRequest = 2;
}

message TaskBroadcastReply {
    required TaskBroadcastType messageType = 1;    
    map<uint32, TaskListReply> listReplies = 2;
}

// Task Messages
message Task {
    required uint64 id = 1;    
    required uint32 itemsCompleted = 2;
    required uint32 itemsSkipped = 3;
    required uint32 itemsTotal = 4;
    required TaskStatus status = 5;
}

enum TaskStatus {
    COMPLETE = 0;
    FAILURE = 1;
    RUNNING = 2;
}

message TaskListRequest {
}

message TaskListReply {
    repeated Task tasks = 1;
}

message TaskShowRequest {
    required uint64 id = 1;
}

message TaskShowReply {
    optional Task task = 1;
}
