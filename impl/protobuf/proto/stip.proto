syntax = "proto2";

package stip;

/*
 * AlbumManagement Service
 */
service AlbumManagement {
    rpc Broadcast (AlbumBroadcastRequest) returns (AlbumBroadcastReply);
    rpc Close (AlbumCloseRequest) returns (AlbumCloseReply);
    rpc Create (AlbumCreateRequest) returns (AlbumCreateReply);
    rpc Delete (AlbumDeleteRequest) returns (AlbumDeleteReply);
    rpc List (AlbumListRequest) returns (AlbumListReply);
    rpc Open (AlbumOpenRequest) returns (AlbumOpenReply);
}

// Album Messages
message Album {
    required int32 dhtKeyLength = 1;
    required Geocode geocode = 2;
    required string id = 3;
    required AlbumStatus status = 4;
}

enum AlbumStatus {
    CLOSED = 0;
    OPEN = 1;
}

enum Geocode {
    GEOHASH = 0;
    QUADTILE = 1;
}

// Broadcast Messages
enum AlbumBroadcastType {
    ALBUM_CREATE = 0;
    ALBUM_CLOSE = 1;
    ALBUM_DELETE = 2;
    ALBUM_OPEN = 3;
}

message AlbumBroadcastRequest {
    required AlbumBroadcastType messageType = 1;    
    optional AlbumCreateRequest createRequest = 2;
    optional AlbumCloseRequest closeRequest = 3;
    optional AlbumDeleteRequest deleteRequest = 4;
    optional AlbumOpenRequest openRequest = 5;
}

message AlbumBroadcastReply {
    required AlbumBroadcastType messageType = 1;    
    map<uint32, AlbumCreateReply> createReplies = 2;
    map<uint32, AlbumCloseReply> closeReplies = 3;
    map<uint32, AlbumDeleteReply> deleteReplies = 4;
    map<uint32, AlbumOpenReply> openReplies = 5;
}

// Close Messages
message AlbumCloseRequest {
    required string id = 1;
}

message AlbumCloseReply {
}

// Create Messages
message AlbumCreateRequest {
    required int32 dhtKeyLength = 1;
    required Geocode geocode = 2;
    required string id = 3;
}

message AlbumCreateReply {
}

// Delete Messages
message AlbumDeleteRequest {
    required string id = 1;
}

message AlbumDeleteReply {
}

// List Messages
message AlbumListRequest {
}

message AlbumListReply {
    repeated Album albums = 1;
}

// Open Messages
message AlbumOpenRequest {
    required string id = 1;
    optional uint64 taskId = 2;
    required uint32 threadCount = 3;
}

message AlbumOpenReply {
    required uint64 taskId = 1;
}

/*
 * ImageManagement Service
 */
service ImageManagement {
    rpc Broadcast (ImageBroadcastRequest) returns (ImageBroadcastReply);
    rpc Coalesce (ImageCoalesceRequest) returns (ImageCoalesceReply);
    rpc Fill (ImageFillRequest) returns (ImageFillReply);
    rpc List (ImageListRequest) returns (stream Image);
    rpc Store (ImageStoreRequest) returns (ImageStoreReply);
    rpc Search (ImageSearchRequest) returns (stream Extent);
    rpc Split (ImageSplitRequest) returns (ImageSplitReply);
}

message Filter {
    optional int64 endTimestamp = 1;
    optional string geocode = 2;
    optional double maxCloudCoverage = 3;
    optional double minPixelCoverage = 4;
    optional string platform = 5;
    required bool recurse = 6;
    optional string source = 7;
    optional int64 startTimestamp = 8;
}

// Broadcast Messages
enum ImageBroadcastType {
    COALESCE = 0;
    FILL = 1;
    SPLIT = 2;
}

message ImageBroadcastRequest {
    required ImageBroadcastType messageType = 1;    
    optional ImageCoalesceRequest coalesceRequest = 2;
    optional ImageFillRequest fillRequest = 3;
    optional ImageSplitRequest splitRequest = 4;
}

message ImageBroadcastReply {
    required ImageBroadcastType messageType = 1;    
    map<uint32, ImageCoalesceReply> coalesceReplies = 2;
    map<uint32, ImageFillReply> fillReplies = 3;
    map<uint32, ImageSplitReply> splitReplies = 4;
}

// Coalesce Messages
message ImageCoalesceRequest {
    required string album = 1;
    required Filter filter = 2;
    required string platform = 3;
    optional uint64 taskId = 4;
    required uint32 threadCount = 5;
    required int64 windowSeconds = 6;
}

message ImageCoalesceReply {
    required uint64 taskId = 1;
}

// Fill Messages
message ImageFillRequest {
    required string album = 1;
    required Filter filter = 2;
    optional uint64 taskId = 3;
    required uint32 threadCount = 4;
    required int64 windowSeconds = 5;
}

message ImageFillReply {
    required uint64 taskId = 1;
}

// List Messages
message Image {
    optional double cloudCoverage = 1;
    required string geocode = 2;
    repeated File files = 3;
    required string platform = 4;
    required string source = 5;
    required int64 timestamp = 6;
}

message File {
    required string path = 1;
    required double pixelCoverage = 2;
    required int32 subdataset = 3;
}

message ImageListRequest {
    required string album = 1;
    required Filter filter = 2; 
}

// Load Messages
enum ImageFormat {
    GRIDMET = 0;
    MCD43A4 = 1;
    MOD11A1 = 2;
    MOD11A2 = 3;
    NAIP = 4;
    NLCD = 5;
    SENTINEL2 = 6;
    VNP21V001 = 7;
}

message ImageStoreRequest {
    required string album = 1;
    required ImageFormat format = 2;
    required string glob = 3;
    required uint32 precision = 4;
    optional uint64 taskId = 5;
    required uint32 threadCount = 6;
}

message ImageStoreReply {
    required uint64 task_id = 1;
}

// Search Messages
message Extent {
    required uint32 count = 1;
    required string geocode = 2;
    required string platform = 3;
    required uint32 precision = 4;
    required string source = 5;
}

message ImageSearchRequest {
    required string album = 1;
    required Filter filter = 2; 
}

// Split Messages
message ImageSplitRequest {
    required string album = 1;
    required Filter filter = 2; 
    optional string geocodeBound = 3;
    required uint32 precision = 4;
    optional uint64 taskId = 5;
    required uint32 threadCount = 6;
}

message ImageSplitReply {
    required uint64 taskId = 1;
}

/*
 * NodeManagement Service
 */
service NodeManagement {
    rpc List (NodeListRequest) returns (NodeListReply);
    rpc Locate (NodeLocateRequest) returns (NodeLocateReply);
}

// Node Messages
message Node {
    required uint32 id = 1;
    required string rpcAddr = 2;
    required string xferAddr = 3;
}

message NodeListRequest {
}

message NodeListReply {
    repeated Node nodes = 1;
}

message NodeLocateRequest {
    required string geocode = 1; 
}

message NodeLocateReply {
    optional Node node = 1;
}

/*
 * TaskManagement Service
 */
service TaskManagement {
    rpc Broadcast (TaskBroadcastRequest) returns (TaskBroadcastReply);
    rpc Clear (TaskClearRequest) returns (TaskClearReply);
    rpc List (TaskListRequest) returns (TaskListReply);
}

// Broadcast Messages
enum TaskBroadcastType {
    TASK_CLEAR = 0;
    TASK_LIST = 1;
}

message TaskBroadcastRequest {
    required TaskBroadcastType messageType = 1;    
    optional TaskClearRequest clearRequest = 2;
    optional TaskListRequest listRequest = 3;
}

message TaskBroadcastReply {
    required TaskBroadcastType messageType = 1;    
    map<uint32, TaskClearReply> clearReplies = 2;
    map<uint32, TaskListReply> listReplies = 3;
}

// Task Messages
message Task {
    required uint32 completedCount = 1;
    required uint64 id = 2;
    required bool running = 3;
    required uint32 skippedCount = 4;
    required uint32 totalCount = 5;
}

// Clear Messages
message TaskClearRequest {
}

message TaskClearReply {
}

// List Messages
message TaskListRequest {
}

message TaskListReply {
    repeated Task tasks = 1;
}
